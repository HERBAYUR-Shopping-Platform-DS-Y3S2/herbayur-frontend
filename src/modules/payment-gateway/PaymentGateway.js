import React from 'react'
import * as braintree from 'braintree-web';
import $ from 'jquery';

export default function PaymentGateway() {

  createBraintreeHostedFields();
  
  return (
    <div>
      <div className="bootstrap-basic">
        <form action="/checkout" className="needs-validation" id="hosted-fields-form" method="post" novalidate="">
          <div className="row">
            <div className="col-sm-6 mb-3">
              <label for="cc-name">Cardholder Name</label>
              <div className="form-control" id="cc-name"></div>
              <small className="text-muted">Full name as displayed on card</small>
              <div className="invalid-feedback">
                Name on card is required
              </div>
            </div>
            <div className="col-sm-6 mb-3">
              <label for="email">Email</label>
              <input type="email" className="form-control" id="email" placeholder="you@example.com" />
              <div className="invalid-feedback">
                Please enter a valid email address for shipping updates.
              </div>
            </div>
          </div>
          <div className="row">
            <div className="col-sm-6 mb-3">
              <label for="cc-number">Credit card number</label>
              <div className="form-control" id="cc-number"></div>
              <div className="invalid-feedback">
                Credit card number is required
              </div>
            </div>
            <div className="col-sm-3 mb-3">
              <label for="cc-expiration">Expiration</label>
              <div className="form-control" id="cc-expiration"></div>
              <div className="invalid-feedback">
                Expiration date required
              </div>
            </div>
            <div className="col-sm-3 mb-3">
              <label for="cc-expiration">CVV</label>
              <div className="form-control" id="cc-cvv"></div>
              <div className="invalid-feedback">
                Security code required
              </div>
            </div>
          </div>
          <div id="checkout-message"></div>
        </form>
      </div>
      <div aria-live="polite" aria-atomic="true" style={{position: 'relative;', minHeight: '200px;'}}>
        <div className="toast" role="alert" aria-live="assertive" aria-atomic="true" data-autohide="false">
          <div className="toast-header">
            <strong className="mr-auto">Success!</strong>
            <small>Just now</small>
            <button type="button" className="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div className="toast-body">
            Next, submit the payment method nonce to your server.
          </div>
        </div>
      </div>
    </div>
  )
}

function createBraintreeHostedFields() {

  // const submit = document.querySelector('button[type="submit"]') as HTMLInputElement;
  const form = document.querySelector('#hosted-fields-form');

  braintree.client.create({
    // Insert your tokenization key here
    authorization: 'sandbox_fwwnjrcr_dtf5v9sfp3p2jpwy'
  }, function (clientErr, clientInstance) {

    if (clientErr) {
      console.error(clientErr);
      return;
    }

    // Create a hostedFields component to initialize the form

    braintree.hostedFields.create({
      client: clientInstance,
      // Customize the Hosted Fields.
      styles: {
        input: {
          // change input styles to match
          // bootstrap styles
          'font-size': '1rem',
          color: '#495057'
        }
      },
      // Configure which fields in your card form will be generated by Hosted Fields instead
      // The hosted fields that we will be using
      // NOTE : cardholder's name field is not available in the field options
      // and a separate input field has to be used incase you need it
      fields: {
        cardholderName: {
          selector: '#cc-name',
          placeholder: 'Name as it appears on your card'
        },
        number: {
          selector: '#cc-number',
          placeholder: '4111 1111 1111 1111',
          // supportedCardBrands: {
          //   visa: false, // prevents Visas from showing up as valid even when the Braintree control panel is configured to allow them
          //   'diners-club': true // allow Diners Club cards to be valid (processed as Discover cards on the Braintree backend)
          // }
        },
        cvv: {
          selector: '#cc-cvv',
          placeholder: '123'
        },
        expirationDate: {
          selector: '#cc-expiration',
          placeholder: 'MM / YY'
        }
      }
    }, function (hostedFieldsErr, hostedFieldsInstance) {
      if (hostedFieldsErr) {
        console.error(hostedFieldsErr);
        return;
      }
      function createInputChangeEventListener(element) {
        return function () {
          validateInput(element);
        }
      }

      function setValidityClasses(element, validity) {
        if (validity) {
          element.removeClass('is-invalid');
          element.addClass('is-valid');
        } else {
          element.addClass('is-invalid');
          element.removeClass('is-valid');
        }
      }

      function validateInput(element) {
        // very basic validation, if the
        // fields are empty, mark them
        // as invalid, if not, mark them
        // as valid

        if (!element.val().trim()) {
          setValidityClasses(element, false);

          return false;
        }

        setValidityClasses(element, true);

        return true;
      }

      function validateEmail() {
        let baseValidity = validateInput(email);

        if (!baseValidity) {
          return false;
        }

        // if (email.val()?.indexOf('@') === -1) {
        //   setValidityClasses(email, false);
        //   return false;
        // }

        setValidityClasses(email, true);
        return true;
      }

      let ccName = $('#cc-name');
      let email = $('#email');

      ccName.on('change', function () {
        validateInput(ccName);
      });
      email.on('change', validateEmail);


      hostedFieldsInstance.on('validityChange', function (event) {
        let field = event.fields[event.emittedBy];

        // Remove any previously applied error or warning classes
        $(field.container).removeClass('is-valid');
        $(field.container).removeClass('is-invalid');

        if (field.isValid) {
          $(field.container).addClass('is-valid');
        } else if (field.isPotentiallyValid) {
          // skip adding classes if the field is
          // not valid, but is potentially valid
        } else {
          $(field.container).addClass('is-invalid');
        }
      });

      hostedFieldsInstance.on('cardTypeChange', function (event) {
        let cardBrand = $('#card-brand');
        let cvvLabel = $('[for="cc-cvv"]');

        if (event.cards.length === 1) {
          let card = event.cards[0];

          // change pay button to specify the type of card
          // being used
          cardBrand.text(card.niceType);
          // update the security code label
          cvvLabel.text(card.code.name);
        } else {
          // reset to defaults
          cardBrand.text('Card');
          cvvLabel.text('CVV');
        }
      });

      // Once the fields are initialized enable the submit button
      // submit?.removeAttribute('disabled');

      // Initialize the form submit event
      form?.addEventListener('submit', function (event) {
        event.preventDefault();
        // When the user clicks on the 'Submit payment' button this code will send the
        // encrypted payment information in a variable called a payment method nonce

        let formIsInvalid = false;
        let state = hostedFieldsInstance.getState();

        // perform validations on the non-Hosted Fields
        // inputs
        if (!validateEmail()) {
          formIsInvalid = true;
        }

        // Loop through the Hosted Fields and check
        // for validity, apply the is-invalid class
        // to the field container if invalid
        Object.keys(state.fields).forEach(function (field) {
          if (!state.fields[field].isValid) {
            $(state.fields[field].container).addClass('is-invalid');
            formIsInvalid = true;
          }
        });

        if (formIsInvalid) {
          // skip tokenization request if any fields are invalid
          return;
        }
        const amount = '10.00';
        hostedFieldsInstance.tokenize(function (tokenizeErr, payload) {
          console.log("payload information", payload);
          if (tokenizeErr) {
            console.error(tokenizeErr);
            console.log();
            return;
          }
          // This is where you would submit payload.nonce to your server
          // (<any/>$('.toast')).toast('show');

          $.ajax({
            type: 'POST',
            url: `http://localhost:5005/braintree/checkouts?amount=${amount}&payment_method_nonce=${payload.nonce}`,
            data: { 'paymentMethodNonce': payload.nonce }
            // url: '/checkout',
            // data: { 'paymentMethodNonce': payload.nonce }
          }).done(function (result) {
            // Since the following code will overwrite the contents of
            // your page with a success or error message, first teardown
            // the Hosted Fields form to remove any extra event listeners
            // and iframes that the Braintree SDK added to your page
            hostedFieldsInstance.teardown(function (teardownErr) {
              if (teardownErr) {
                console.error('Could not tear down the Hosted Fields form!');
              } else {
                console.info('Hosted Fields form has been torn down!');
                // Remove the 'Submit payment' button
                // form.removeChild(submit);
              }
            });
          });
        });
      }, false);
    });
  });
};
